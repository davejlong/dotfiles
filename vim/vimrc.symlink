set t_Co=256

scriptencoding utf-8
set encoding=utf-8

call pathogen#infect()


syntax on
set nocompatible
let mapleader = ","

set background=dark

let os=substitute(system('uname'), '\n', '', '')
if os == 'Darwin'
  colorscheme Tomorrow-Night-Bright
elseif os == 'Linux'
  colorscheme Tomorrow-Night
endif

" Line Numbering
set number
set ruler

" Line wrapping
set nowrap

" File Editing
"set relativenumber Turned off because it is making Vim dog-slow
set undofile
set list 

set listchars=trail:·,eol:¬
set colorcolumn=80 " Mark 80th column so as to not make lines too long

" Searching
nnoremap / /\v
vnoremap / /\v
set hlsearch
set incsearch
set ignorecase
set smartcase
set gdefault
set showmatch
"nnoremap <Tab> %
"vnoremap <Tab> %

" Indentation
set smartindent
set autoindent
set expandtab
set tabstop=2
set shiftwidth=2
set cinkeys=0{,0},:,0#,!,!^F

" Line Wrapping
set wrap
set linebreak

" Encryption method for vim -x https://coderwall.com/p/hypjbg
if exists("&cryptmethod")
  set cryptmethod=blowfish
endif

" Use semi-colon instead of colon
nnoremap ; : 

" Save with W
cnoreabbrev W w

" Allow root after opening file
cmap w!! w !sudo tee % >/dev/null

" Save file on blur
au FocusLost * :wa

" Status line customization
set laststatus=2
set statusline=%f\ %m\ %r\ Line:%l/%L\ [%p%%]\ %r\ Col:%v\ %r\ Buf:#%n
set statusline+=%=%{fugitive#statusline()}

" Treat underscore as a word boundary (http://superuser.com/a/244070)
set iskeyword-=_

" The Silver Searcher
if executable('ag')
  "Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0

  command! -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
  nnoremap \ :Ag<SPACE>
endif

"autocmd BufRead,BufNewFile *.md setlocal spell
"autocmd BufRead,BufNewFile *.md,*.markdown,*.mdown setlocal spell
"autocmd FileType gitcommit setlocal spell

" Load plugin configs
function! PluginConfigs ()
  let vimscripts = split(globpath("$ZSH/vim", '*.vim'), '\n')
  for i in vimscripts
    exec ":source " . i
  endfor
endfunction
call PluginConfigs()

if file_readable(expand("$HOME/.vimrc.local"))
  source $HOME/.vimrc.local
endif

map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>
imap <up> <nop>
imap <down> <nop>
imap <left> <nop>
imap <right> <nop>
